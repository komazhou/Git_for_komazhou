# Rime schema
# encoding: utf-8
# 基于全拼方案
# 感谢fkxxyz提供的词库支持 - https://www.fkxxyz.com

schema:
  schema_id: FlyDP
  name: 小鹤双拼+形辅(定制)
  version: "1.1"
  author:
    - double pinyin layout by 鶴
    - Rime schema by 佛振 <chen.sst@gmail.com>
    - config by 周辉〈komazhou630@gmail.com>
  description: |
    朙月拼音＋小鶴雙拼+小鶴形码辅助方案。
  dependencies:    # 如果本方案依賴於其它方案〔通常來說會依頼其它方案做爲反查，抑或是兩種或多種方案混用時〕
    - easy_en
    - emoji
    - luna_pinyin
switches:
  - name: simplification
    reset: 0 #默认简体汉字 0为下方中括号内的左项,1为右项
    states: [ 简, 繁 ]
  - name: emoji_suggestion
    reset: 1
    states: [ "🈚️️\uFE0E", "🈶️️\uFE0F" ]
  - name: symbol_support
    reset: 1
    states: [ "无符", "符" ]
  - name: ascii_punct
    reset: 0
    states: [ 。，, ．， ]
  - name: full_shape
    reset: 0
    states: [ 半, 全 ]
  - name: ascii_mode
    reset: 0 #默认中文编码
    states: [ 中, 英 ]

engine:

  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator
    - script_translator
    - lua_translator@date_translator # 增加日期和时间翻译器 通过Lua语言实现
    - table_translator@custom_phrase # 增加自定义短语
    - table_translator@easy_en
  filters:
    - simplifier@emoji_suggestion #表情
    - simplifier@symbol_support #符号支持
    - simplifier
    - uniquifier

#添加自定义短语
custom_phrase:
  db_class: stabledb
  dictionary: ""
  enable_completion: false
  enable_sentence: false
  initial_quality: 1
  user_dict: custom_phrase
  
simplifier:
  option_name: zh_simp_s2t
  opencc_config: s2t.json

emoji_suggestion:
  opencc_config: emoji.json
  option_name: emoji_suggestion
  tips: all
  
easy_en:
  comment_format:
    - "xform/^.+$//"
  dictionary: easy_en
  enable_completion: true
  enable_sentence: false
  initial_quality: 0
  spelling_hints: 9

symbol_support:
  opencc_config: symbol.json
  option_name: symbol_support
  tips: all

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcba;  # alphabet：设置本 speller 需要监听的键
#  initials: zyxwvutsrqponmlkjihgfedcba  # initials：设置哪些键仅在开头的时候才需要监听
#  finals: ;  # finals：设置哪些键仅在末尾的时候才需要监听
  # delimiter：分词符
  delimiter: " '"
  algebra:  # algebra：Rime 核心的拼写运算规则，所有 algebra 算出的规则最后写入 prism
    - erase/^xx$/
          # 消除／Erasion : 若拼寫與<模式> 完全匹配，則將該拼寫從有效拼寫集合中消除。
          # 格式：erase/<模式>/
          # 實例：算式 erase/^.*\d$/  運算元dang1結果 帶聲調的拼音不再可用
    - derive/^([jqxy])u$/$1v/    # 派生：将输入ju和jv等效；将输入qu和qv等效；将输入xu和xv等效；将输入yu和yv等效，次出的u和v均对应拼音中的ü
    - derive/^([aoe])([ioun])$/$1$1$2/    # 派生：将编码为ai\ao\au\an\oi\oo\ou\on\ei\eo\eu\en对应派生出aai\aao\aau\aan\ooi\ooo\oou\oon\eei\eeo\eeu\een的等效编码。
          # 派生／Derivation : 若對拼寫做正則模式匹配、替換而獲得了新的拼寫，則有效拼寫集合同時包含派生前後的拼寫；否則僅保留原拼寫。
          # 格式：derive/<模式>/<替換式>/
          # 實例一：算式 derive/^([nl])ue$/$1ve/  運算元 nue  結果 nve
          # 效果：輸入nve或nue(lve或lue)均可獲得源碼表中與編碼nue(lue)對應的候選
          # 實例二：算式 derive/^[nl](.*)$/l$1/  運算元 na  結果 la
          # 效果：輸入la可獲得源碼表中與編碼na、la對應的候選；輸入na，候選仍爲碼表中編碼爲na的候選
    - xform/^([aoe])(ng)?$/$1$1$2/    # 变形：将编码为ang、ong和eng变形为aang、oong和eeng后便于双拼分割；
    - xform/iu$/Q/                    # 变形：将“iu”结尾的编码变形为大写“Q”结尾的编码；用于双拼韵母
    - xform/(.)ei$/$1W/               # 变形：将“ei”结尾的编码变形为大写“W”结尾的编码；用于双拼韵母；同时排除编码为ei的字
    - xform/uan$/R/                   # 变形：将“uan”结尾的编码变形为大写“R”结尾的编码；用于双拼韵母
    - xform/[uv]e$/T/                 # 变形：将“ue”和“ve”结尾的编码变形为大写“T”结尾的编码；用于双拼韵母
    - xform/un$/Y/                    # 变形：将“un”结尾的编码变形为大写“Y”结尾的编码；用于双拼韵母
    - xform/^sh/U/                    # 变形：将双声母“sh”的编码变形为大写“U”；用于双拼的双声母
    - xform/^ch/I/                    # 变形：将双声母“ch”的编码变形为大写“I”；用于双拼的双声母
    - xform/^zh/V/                    # 变形：将双声母“zh”的编码变形为大写“V”；用于双拼的双声母
    - xform/uo$/O/                    # 变形：将uo”结尾的编码变形为大写“O”结尾的编码；用于双拼韵母
    - xform/ie$/P/                    # 变形：将“ie”结尾的编码变形为大写“P”结尾的编码；用于双拼韵母
    - xform/i?ong$/S/                 # 变形：将“iong”和“ong”结尾的编码变形为大写“S”结尾的编码；用于双拼韵母
    - xform/ing$|uai$/K/              # 变形：将“ing”和“uai”结尾的编码变形为大写“K”结尾的编码；用于双拼韵母
    - xform/(.)ai$/$1D/               # 变形：将“ai”结尾的编码变形为大写“D”结尾的编码；用于双拼韵母；同时排除编码为ai的字
    - xform/(.)en$/$1F/               # 变形：将“en”结尾的编码变形为大写“F”结尾的编码；用于双拼韵母；同时排除编码为en的字
    - xform/(.)eng$/$1G/              # 变形：将“eng”结尾的编码变形为大写“G”结尾的编码；用于双拼韵母；同时排除编码为eng的字
    - xform/[iu]ang$/L/               # 变形：将“iang”和“uang”结尾的编码变形为大写“L”结尾的编码；用于双拼韵母
    - xform/(.)ang$/$1H/              # 变形：将“ang”结尾的编码变形为大写“H”结尾的编码；用于双拼韵母；同时排除编码为ang的字
    - xform/ian$/M/                   # 变形：将“ian”结尾的编码变形为大写“M”结尾的编码；用于双拼韵母
    - xform/(.)an$/$1J/               # 变形：将“an”结尾的编码变形为大写“J”结尾的编码；用于双拼韵母；同时排除编码为an的字
    - xform/(.)ou$/$1Z/               # 变形：将“ou”结尾的编码变形为大写“Z”结尾的编码；用于双拼韵母；同时排除编码为ou的字
    - xform/[iu]a$/X/                 # 变形：将“ia”和“ua”结尾的编码变形为大写“X”结尾的编码；用于双拼韵母
    - xform/iao$/N/                   # 变形：将“iao”结尾的编码变形为大写“N”结尾的编码；用于双拼韵母
    - xform/(.)ao$/$1C/               # 变形：将“ao”结尾的编码变形为大写“C”结尾的编码；用于双拼韵母；同时排除编码为ao的字
    - xform/ui$/V/                    # 变形：将“ui”结尾的编码变形为大写“V”结尾的编码；用于双拼韵母
    - xform/in$/B/                    # 变形：将“in”结尾的编码变形为大写“B”结尾的编码；用于双拼韵母
          # 变形：變形／Transformation : 若拼寫（或其子串）與<模式>匹配，則將所匹配的部份改寫爲<替換式>；否則拼寫保持不變。模式、替換式遵循Perl正則表達式語法
          # 格式：xform/<模式>/<替換式>/
          # 實例：算式 xform/^([nl])ue$/$1ve/  運算元 nue  結果 nve
          # 效果：輸入nve(lve)可以獲得源碼表中與編碼nue(lue)對應的候選；輸入nue(lue)無候選
    - xlit/QWRTYUIOPSDFGHJKLZXCVBNM/qwrtyuiopsdfghjklzxcvbnm/
          # 轉寫／Transliteration : 依次將拼寫中見於<左字母表>的字符替換爲<右字母表>對應位置的字符。左、右字母表應包含相同數目的Unicode字符。
          # 转写：格式：xlit/<左字母表>/<右字母表>/
          # 實例：算式 xlit/abc/ABC/  運算元 abracadabra  結果 ABrACAdABrA
# —————————以下为重点修改部分————————————————
#    - fuzz/^(\w\w)\w{0,2};{0,1}$/$1/
    - fuzz/^(\w\w)\w{1,2};{0,1}$/$1/
#    - fuzz/^(\w\w)\w{1,2}'{0,1}$/$1/
          # 利用fuzz的模糊匹配来实现利用辅助码组词并增加到候选词的功能
          # 模糊／Fuzzing : 執行派生運算；派生出的拼寫將獲得「模糊」屬性，可設定將其用作構成詞組的簡碼、但不用於輸入單字。
          # 格式：fuzz/<模式>/<替換式>/
          # 實例：算式 fuzz/^([a-z]).+([a-z])$/$1$2/
          # 效果：以首、尾碼爲多字母音節碼的構詞碼。
          # 註：需配合 script_translator 的選項 `translator/strict_spelling: true` 方可限定該拼寫不用於輸入單字。
#—————————以上为重点修改部分————————————————
    #- abbrev/^(.).+$/$1/
          # 縮略／Abbreviation : 執行派生運算；派生出的拼寫將獲得「縮略」屬性，會在音節切分時與通常的拼寫做區分處理。
          # 格式：abbrev/<模式>/<替換式>/
          # 實例：算式 abbrev/^([a-z]).+$/$1/
          # 效果：以首字母爲多字母音節碼的縮寫。
translator:
  dictionary: FlyDP  # dictionary：翻译器使用的字典名,指定字典
  # prism：设定此翻译器的 speller 生成的棱镜文件名，或此副编译器调用的棱镜名
  prism: FlyDP    # prism 要以本輸入方案的名稱來命名，以免把朙月拼音的拼寫映射表覆蓋掉
  preedit_format: {} # 這段代碼用來將輸入的雙拼碼反轉爲全拼顯示；待見雙拼碼的可以把這段拿掉

reverse_lookup:
  dictionary: luna_pinyin.custom  #用于反查编码的另一种输入法词库名称 
  preedit_format:
    - "xlit|abcdefghijklmnopqrstuvwxyz|abcdefghijklmnopqrstuvwxyz|"
  comment_format:
    - "xlit|abcdefghijklmnopqrstuvwxyz|abcdefghijklmnopqrstuvwxyz|"
  prefix: "U" #反查引导符，即按下这个键后再输入另一种输入法的编码
  suffix: "'"
  tips: "〔U模式-全拼反查〕"

# 由于标点（punctuator）和按键（key_binder）导入预设(import_preset:)的对象均为default(.yaml)；
# 如果在default.custom.yaml中为标点（punctuator）和按键（key_binder）打补丁，补丁会直接覆盖default.yaml中的设置，从而丢失部分预设。
# 最好的解决办法就是单独对输入方案打补丁。
punctuator:
  import_preset: symbols
  full_shape:
    "`": "｀"
    "~": "～"
    "!": "！"
    "@": "＠"
    "#": "＃"
    "$": "￥"
    "%": "％"
    "^": "……"
    "&": "＆"
    "*": "*"
    "(": "（"
    ")": "）"
    "_": "——"
    "+": "＋"
    "-": "－"
    "=": "＝"
    "[": "【"
    "]": "】"
    "{": "｛"
    "}": "｝"
    "|": "｜"
    "\\": "、"
    "/": "、"
    ";": "；"
    "'": "‘"
    ",": "，"
    ".": "。"
    "<": "《"
    ">": "》"
    "?": "？"
  half_shape:
    "`": "·"
    "~": "～"
    "!": "！"
    "@": "@"
    "#": "#"
    "$": "￥"
    "%": "%"
    "^": "……"
    "&": "&"
    "*": "*"
    "(": "（"
    ")": "）"
    "_": "——"
    "+": "+"
    "-": "-"
    "=": "="
    "[": "【"
    "]": "】"
    "{": "｛"
    "}": "｝"
    "|": "｜"
    "\\": "、"
    "/": "、"
    ";": "；"
    "'": "’"
    ",": "，"
    ".": "。"
    "<": "《"
    ">": "》"
    "?": "？"
key_binder:
  import_preset: default
  bindings:
    - {accept: Tab, send: Right, when: composing}
    - {accept: minus, send: Page_Up, when: paging}
    - {accept: equal, send: Page_Down, when: has_menu}
    - {accept: bracketleft, send: Page_Up, when: paging}
    - {accept: bracketright, send: Page_Down, when: has_menu}
    - {accept: comma, send: Page_Up, when: paging}
    - {accept: period, send: Page_Down, when: has_menu}
    - {accept: "Control+Shift+1", select: .next, when: always}
    - {accept: "Control+Shift+2", toggle: zh_simp_s2t, when: always}
    - {accept: "Control+Shift+3", toggle: emoji_suggestion, when: always}
    - {accept: "Control+Shift+4", toggle: symbol_support, when: always}
    - {accept: "Control+Shift+5", toggle: ascii_punct, when: always}
    - {accept: "Control+Shift+6", toggle: full_shape, when: always}
    - {accept: "Control+Shift+exclam", select: .next, when: always}
    - {accept: "Control+Shift+at", toggle: zh_simp_s2t, when: always}
    - {accept: "Control+Shift+numbersign", toggle: emoji_suggestion, when: always}
    - {accept: "Control+Shift+dollar", toggle: symbol_support, when: always}
    - {accept: "Control+Shift+percent", toggle: ascii_punct, when: always}
    - {accept: "Control+Shift+asciicircum", toggle: full_shape, when: always}
    - {accept: "Shift+space", toggle: full_shape, when: always}
    - {accept: "Control+comma", toggle: ascii_punct, when: always}
    - {accept: "Control+period", toggle: ascii_punct, when: always}
    - {accept: "Control+Shift+f", toggle: zh_simp_s2t, when: always}
    - {accept: "Control+Shift+F", toggle: zh_simp_s2t, when: always}
    - {accept: KP_Enter, send: Return, when: has_menu}

recognizer:
  import_preset: default
  patterns:
    #email: "^[A-Za-z][-_.0-9A-Za-z]*@.*$"
    #uppercase: "[A-Z][-_+.'0-9A-Za-z]*$"
    #uppercase2: "[A-Za-z][-_+.'A-Za-z]*$"
    url: "^(www[.]|https?:|ftp[.:]|mailto:|file:).*$|^[a-z]+[.].+$"
    reverse_lookup: "U[a-z]*'?$"

ascii_composer: # 设置caps、shift、control等键的作用
  import_preset: default
  good_old_caps_lock: true # 若为true，caps只切换大小写
  switch_key:
    Shift_L: commit_code   # 左 Shift 切换直接上屏字母
    Shift_R: commit_code   # 右 Shift 切换直接上屏字母
    Control_L: noop
    Control_R: noop
    Caps_Lock: commit_code
    Eisu_toggle: clear
# 可選的臨時切換策略有三：
# inline_ascii 在輸入法的臨時西文編輯區內輸入字母、數字、符號、空格等，回車上屏後自動復位到中文
# commit_text 已輸入的候選文字上屏並切換至西文輸入模式
# commit_code 已輸入的編碼字符上屏並切換至西文輸入模式
# 設爲 noop，屏蔽該切換鍵

#   key_binder:
#     import_preset: default
#     bindings: # 设置哪些键可以翻页，需要哪个取消注释即可
#       - {accept: Tab, send: Right, when: composing} #composing操作输入码用；这里通过Tab移动光标向右
#       - {accept: minus, send: Page_Up, when: has_menu} #减号向前翻页
#       - {accept: equal, send: Page_Down, when: has_menu} #等号向后翻页
#       - {accept: bracketleft, send: Page_Up, when: paging} #[键向后翻页
#       - {accept: bracketright, send: Page_Down, when: has_menu} #]键向后翻页
#       - {accept: comma, send: Page_Up, when: paging} #paging翻页用；这里通过逗号向前翻页
#       - {accept: period, send: Page_Down, when: has_menu} #has_menu操作后选项用；这里通过句号向后翻页；这时句号无法顶字上屏，方便输入网址等使用。